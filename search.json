[{"title":"MM-Path. Multi-modal, Multi-granularity Path Representation Learning","url":"/2025/01/03/MM-PATH/","content":"在智能交通的各个领域中，开发有效的路径表征变得越来越重要。尽管预训练的路径表征学习模型表现出了不错的性能，但它们主要关注单模态数据的拓扑结构，如道路网络，而忽略了与路径图像（如遥感图像）相关的几何和上下文特征。整合来自多种模态的信息可以提供更全面的视角，提高表征精度和泛化能力。然而，信息粒度的差异阻碍了基于路网的路径（道路路径）和基于图像的路径（图像路径）的语义对齐，同时多模态数据的异构性也给有效融合和利用带来了巨大挑战。本文提出一种新的多模态、多粒度的路径表征学习框架（MM-Path），通过整合道路路径和图像路径这两种模态来学习通用的路径表征。为增强多模态数据的对齐，我们提出了一种多粒度对齐策略，系统地将节点、道路子路径和道路路径与其对应的图像块关联起来，确保详细的局部信息和更广泛的全局上下文的同步。为了有效解决多模态数据的异构性，我们提出了一种基于图的跨模态残差融合组件，旨在全面融合不同模态和粒度的信息。最后，在两个下游任务下的两个大规模真实数据集上进行了广泛的实验，验证了MM-Path的有效性。\n\n\n作者：  徐榕荟，成涵吟，郭晨娟，高洪帆，胡吉林，杨斌，杨彬\n机构： 华东师范大学，重庆邮电大学\n关键词： 路径表征学习， 多模态， 自监督学习\n论文链接： https://arxiv.org/abs/2411.18428\n代码链接： https://github.com/decisionintelligence/MM-Path\n\n\n动机在智能导航、城市规划以及城市应急管理等领域，理解路径并开发有效的路径表示变得日益重要。路径表征可以广泛应用于路径旅行时间估计、路径推荐以及公共交通系统的布局分析与优化等方面。近年来，许多研究工作致力于构建预训练路径表征学习模型，这些模型展现了出色的泛化能力。在现实世界中，路径存在于多种模态中，它们提供了更为丰富和多样的信息。例如，从道路网络中提取的路径（简称“道路路径”）揭示了道路段之间的拓扑关系；而遥感图像中的路径（简称“图像路径”）则从几何特征及更广泛的环境上下文中提供了新的视角（如图1 所示）。通过整合这些不同的模态信息，我们能够从多角度丰富路径的表征，进而提升模型的准确性和泛化性。然而，目前的路径表征学习模型主要依赖于来自道路网络的单一模态数据，尚未充分捕获对于全面理解路径至关重要的深层次、全面的上下文信息。因此，开发一个能够整合多模态数据的预训练路径表征学习模型显得尤为必要。\n\n图1：一条路径的不同模态\n\n挑战构建这样一个预训练多模态路径表征学习模型时，主要面临了两个挑战：\n（1）道路路径和图像路径之间的信息粒度差异严重阻碍了跨模态语义对齐。 如图1所示，道路路径通常侧重于详细的拓扑结构并描绘道路连通性，而图像路径则提供了更广阔的全局环境上下文，反映了相应区域的功能属性。需要指出的是，图像中可能包含大量与道路路径相关性较低的区域，如图1(c) 中的深色区域。现有的图像-文本多模态模型通常采用单图像与文本序列对齐的方式，这种单一的粗粒度对齐方法可能引入噪声，不足以满足路径表征的精细对齐需求。\n（2）道路路径和图像路径固有的异质性对特征融合构成巨大挑战。 道路路径和图像路径在学习方法上的差异巨大，导致它们被映射到不同的嵌入空间，使得具有相似语义的特征维度包含完全不同的信息。简单的融合策略可能会导致信息丢失或偏差增加，且难以捕捉道路路径和图像路径之间的微妙相关性。\n方法为应对这些挑战，我们提出一种多模态、多粒度的路径表征学习框架MM-Path，用于学习通用路径表征。图2 展示了MM-Path的总体框架。MM-Path包含了两个关键组件：多粒度对齐（Multi-granularity Alignment）组件和基于图的跨模态残差融合（Graph-based Cross-modal Residual Fusion）组件。\n\n图2：MM-Path的总体框架\n\n多粒度对齐组件系统地将路口、子路径和整个道路路径与其对应的图像信息关联起来，以更精细的粒度准确捕捉细节，并在更粗的粒度上保持全局对应。 具体来说，我们将整个感兴趣区域的图像划分为固定尺寸的小图像，沿着每条路径收集固定尺寸的小图像，并将收集的图像排列在一个图像路径（即图像序列）中。然后，我们采用模态特定的tokenizers分别为道路路径和图像路径生成初始嵌入。随后，这些初始嵌入被输入到Transformer架构中，在三种粒度上学习每种模态的复杂编码嵌入。最后，采用多粒度对齐损失函数确保不同粒度下道路和图像编码的嵌入对齐。\n基于图的跨模态残差融合组件旨在在融合空间上下文信息的同时有效融合跨模态特征。我们将每个模态的编码嵌入与另一个模态的初始嵌入拼接起来，分别创建道路和图像残差嵌入，以融合不同阶段的跨模态特征。然后，基于空间对应关系和上下文信息为每条路径构建跨模态邻接矩阵。该矩阵利用GCN迭代地分别融合两种残差嵌入，从而获得道路和图像融合嵌入。最后应用对比损失来确保两种模态融合嵌入的一致性。最后，我们将这两个融合的嵌入连接起来，得到一个通用的路径表征。由于最终表征有效地融合了两模态的跨阶段特征和空间上下文信息，因此该组件不仅实现了深度的多模态融合，而且增强了信息的综合利用。\n实验结果整体表现表 1 展示了两项任务——旅行时间估计和路径排序的整体性能表现。我们使用“$\\uparrow$”（越大越好）和“$\\downarrow$”（越小越好）来标记数值的优劣。在每项任务中，我们通过粗体和下划线来分别突出最佳和次佳的表现。此外，“Improvement”和“Improvement*”两行分别量化了MM-Path模型相较于最佳单模态和多模态基线模型的性能提升。MM-Path在两个数据集上的表现都优于所有基线，显示了它的优越性。\n表1：旅行时间估计和路径排序的整体准确性\n\n\n\n示例分析我们考察了奥尔堡的一对具有代表性的路径，以证明MM-Path的优越性。道路路径和图像路径如图 3 所示。\n\n图 3：两条路径的可视化\n\n图 3 中的两条路径在路网中表现出相似的结构，都具有$\\langle 3, 2, 3, 3, 3\\rangle$的节点度序列。这种单模态数据可能暗示两条路径的旅行时间接近。然而，从它们的图像信息来看，两者存在显著差异。例如，路径1通过一个环形交叉口并沿主干道行驶，通常这样的路径允许较快的行驶速度。而路径2则位于住宅区附近的普通道路，行驶速度通常较慢。\n表 2 报告了不同模型对这两条路径估计的旅行时间。模型TrajCL， START 和START+image预测路径2的旅行时间短于路径1，与实际情况相悖。 这表明，单一模态数据的信息可能有限，而且简单地将多模态数据拼接在一起，如START+image模型，未能有效地利用图像信息。相比之下，虽然多模态模型 JGRM 的结果与实际旅行时间的相对差异保持一致，但估计值仍有较大偏差。MM-Path 模型则显示出较好的旅行时间估计性能，表明它能有效整合并利用图像信息，从而提供更准确的预测。\n表2：不同模型的旅行时间估计结果\n\n\n结论本文介绍了一种多模态多粒度路径表征学习框架MM-Path。这是首次尝试将道路网络和图像数据融合于通用的路径表征学习中。首先，框架对道路路径和图像路径分别进行建模，实施多粒度对齐策略，确保精细的局部信息与广泛的全局上下文能够同步。此外，我们开发了一种基于图的跨模态残差融合组件，它能有效整合来自两种模态的信息，同时保持模态间的语义一致性。在两个真实数据集上进行的下游任务测试中，MM-Path超越了所有基线模型，展现了其卓越的性能。\n","tags":["路径","表征学习","多模态"]},{"title":"Tree-guided Multi-task Embedding Learning for Semantic Annotation of Venues Using Check-ins","url":"/2024/04/20/TME/","content":"许多兴趣点（POI）缺乏语义标注，无法补充兴趣点的表示，这对于用户探索新的场所以及基于语义的推荐服务、城市计算等产生了巨大的阻碍。给定用户签到轨迹以及类别标签的层次结构，我们的目标是将兴趣点以及类别标签映射到向量空间中，然后基于兴趣点向量和类别向量为无类别标签的兴趣点预测类别。\n\n现有方法要么未能对签到序列中的上下文信息(包括兴趣点上下文和类别上下文)进行完整建模，要么没有考虑相关类别之间的语义相关性(即层次结构)。\n\n\n方法\n\n我们提出了一种基于树形层次结构的多任务表征学习模型（TME），用于兴趣点语义标注。模型由两个组件组成：\n\n序列及类别嵌入组件\n\n该组件的主要目标是学习兴趣点序列和相应的类别序列来表示兴趣点和类别。我们通过对兴趣点上下文和类别上下文进行建模，分别构建了兴趣点-兴趣点共现和兴趣点-类别两种共现模式，并对它们进行矩阵分解来学习兴趣点表征和类别表征。在本部分中，包含在这两种上下文中的序列模式和特征可以帮助我们更好地表达兴趣点和类别。\n\n\n基于层次结构的多任务学习组件\n\n这一部分旨在通过建模已知的兴趣点类别和预定义的类别层次结构来丰富和增强这些表征。由于类别具有树状结构，类别作为场馆的标签信息不是独立的，而是层次相关的。我们把一个兴趣点类别标注看作一个任务，与父类和子类相关的地点标注任务之间存在一定的相关性。因此，提出了一种基于类别的层次结构的多任务学习模块来捕捉任务间的相关性(即，由已知的类别层次结构确定相互关联类别之间的相似性)，通过group lasso（2,1范式）约束，使语义相似性较大的类别组之间的分类任务高度相关，具有更强的任务共享特征，学习到更具辨析性的兴趣点和类别表征。\n\n\n\n这两个组件通过一个统一的框架完成学习，兴趣点语义也得到了相应的规范。最后通过模型框架将兴趣点和类别投射在同一个嵌入空间中。\n实验结果所有的实验在东京与纽约两个数据集上进行，实验结果如图3，图4所示。\n\n\n\n\n","tags":["数据挖掘","时空","POI"]},{"title":"A Spatial and Adversarial Representation Learning Approach for Predicting Land Use of Zones with POIs","url":"/2024/04/20/SARL/","content":"城市，作为一个复杂的空间与人文系统，其中存在着多种类型的兴趣点，如商场、银行等。兴趣点数据具有覆盖范围广、快速、获取简单等特点。了解与表征城市对便利居民生活、高效利用土地资源、改善城市功能区感知以及助力智慧城市建设等有着重要支撑作用，具有重要的学术价值和现实意义。\n随着城市的发展与扩张，城市区域常常会偏离原有类型。使用频繁更新的数据及时了解与表征城市区域，预测城市区域类型，对城市规划有着重要的意义。同时，其可以为人类移动轨迹预测、面向用户的位置推荐等城市相关任务提供辅助信息，具有重要的支撑作用。城市区域内包含非常多的兴趣点信息，我们的目标是通过挖掘区域内频繁更新的兴趣点数据，进行城市区域表征学习与区域类型预测。\n\n\n\n\n现有方法往往先学习POI的表示，然后对区域内POI进行聚合以学习城市区域表征。这些方法损失了许多POI类别的潜在信息，并不能感知每个区域POI的空间配置和类别层次。我们根据区域中POI分布将区域表示成一个三维张量；再根据已知的类别层次结构以及分布在区域内的所有兴趣点为每一个区域构造区域语义树。通过这两种特征，分别挖掘区域空间信息与区域语义信息。\n\n\n方法\n\n我们提出的城市区域表征与分类模型，主要包含三个部分：区域空间特征挖掘、区域语义特征挖掘以及多元特征融合预测。\n\n区域空间特征挖掘模块：利用卷积神经网络学习三维张量，捕捉兴趣点的局部位置关系，学习区域空间特征表示。\n区域语义特征挖掘模块：利用一种深度自动编码器挖掘语义树，学习区域语义特征表示。我们构造语义模式提取器来获取高权重节点组成的子树，并基于生成对抗的思想进行挖掘，以捕捉语义树中的关键特征，。\n多元特征融合预测模块：基于区域空间特征和语义特征，采用 Wide &amp; Deep结构进行特征融合，然后输入到分类器中。\n\n同时，区域的类型标签信息也可以回传给深度网络，进而增强区域特征表示。最后，针对城市中所有区域联合优化这三部分目标函数。在预测阶段，将区域内兴趣点位置以及区域内兴趣点语义树分别传给卷积神经网络和编码器来获得区域空间特征和区域语义特征，然后传入Wide &amp; Deep网络来预测区域功能类型。 \n实验结果下面是模型与其他方法的对比。\n\n\n\n\n","tags":["表征学习","POI","机器学习","城市"]},{"title":"Hexo+GitHub 搭建个人博客实现教程","url":"/2024/04/18/tutorial/","content":"本教程手把手介绍了如何使用Hexo+GitHub 搭建个人博客。\n\n软件下载Hexo 基于 Node.js，搭建过程中还需要使用 npm 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。\n\nNode.js：https://nodejs.org/zh-cn\nGit：https://git-scm.com/downloads\n\n下载 Node.js 和 Git 程序并安装\n连接Github通过Git Bash Here，设置用户名和邮箱：\ngit config --global user.name &quot;GitHub 用户名&quot;git config --global user.email &quot;GitHub 邮箱&quot;\n\n创建 SSH 密匙\nssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;\n\n添加密匙进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。\n登陆 GitHub ，进入 Settings 页面， SSH and GPG keys中新建 SSH key 并保存。\n接着创建一个Github Pages 仓库\n本地安装 Hexo 博客程序先新建一个放 Hexo 的程序文件夹，在该文件夹下右键 -&gt; Git Bash Here。\n使用 npm 一键安装 Hexo 博客程序：\nnpm install -g hexo-cli\n\n初始化Hexo并安装所需组件：\nhexo init      # 初始化npm install    # 安装组件\n\n完成即可启动本地服务器进行预览：\nhexo g   # 生成页面hexo s   # 启动预览\n\n部署 Hexo 到 GitHub Pages本地博客测试成功后，接下来上传到 GitHub 进行部署，使其能够在网络上访问。\n安装 hexo-deployer-git：\nnpm install hexo-deployer-git --save\n\n然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：\ndeploy:  type: git  repository: git@github.com:用户名/用户名.github.io.git  branch: main\n\n完成后运行 hexo d 将网站上传部署到 GitHub Pages。\n完成！这时访问我们的 GitHub 域名 https:&#x2F;&#x2F;用户名.github.io 就可以看到 Hexo 网站了。\n","tags":["Hexo","教程"]},{"title":"搭建个人博客总结","url":"/2024/04/19/summary/","content":"本次搭建了基于Hexo+GitHub的个人博客，博客中包括了个人简介，一些发表的论文介绍，以及搭建个人博客的教程和总结。\n未来，这个博客也会用于记录生活、分享技术、分享科研进展。\n\n\n博客主题选择Hexo有很多主题可以选择，最终我选择了Keep这一款主题，选择这款主题有下面几个原因：\n\n页面设计十分简约、大气。\n具备博客的基础功能，包括分类、搜索、归档、标签等等。\n该主题支持中文，也支持阅读模式和夜间模式。\n该主题运行稳定、具有详细的文档，方便实现。\n该主题长期维护，上一次更新时间为2024年3月12日，因此能较好地适配Hexo。\n\n博客功能简介\n首页\nslogan动画输出并展示\n联系方式\n\n\n博客\n博客封面图\n字数统计\n文章阅读次数的计数\n下拉的进度条\n阅读进度百分比展示\n夜间模式\n作者打赏\n博客分享（QQ、微信、微博）\n\n\n归档\n博客时间线查看\n\n\n标签\n所有标签统计\n相关标签博客时间线查看\n\n\n工具\n常用工具跳转\n\n\n关于-作者信息展示\n搜索\n支持本地博客内容的搜索\n\n\n\n博客页面布局首页首页非常简约，同时伴随有动画，输出一句slogan。下方有制作者的GitHub以及邮箱的联系方式。\n下拉可以看到所有的博客内容。其中右边有下拉的位置显示，右下角有下拉的进度条，支持阅读进度查看。\n\n\n右下角的设置中可以放大或者缩小页面，可以直接下滑到最底端，也可以设置夜间模式。\n\n\n博客博客页面支持封面图、发布时间、上次修改时间、博客的总字数以及文章阅读次数展示。\n\n\n博客底部支持对作者的打赏以及分享。\n\n\n\n\n\n\n归档归档可以查看博客发布的时间线，支持点击对博客的跳转。\n标签标签页面展示发布的博客的tags，点击相关tag可以展示相关tag的博客发布的时间线。\n\n\n工具展示了常用工具并支持相关链接的跳转。\n\n\n关于展示了作者的信息。\n搜索通过输入关键词，搜索相关博客。\n博客制作遇到的问题问题1：本地页面正常，线上页面为初始状态经过排查，发现由于Github默认分支从master变成了main，导致部署 Hexo 到 GitHub Pages时出现问题。在部署时，需要定义branch为main。\n解决方案：_config.yml里的URL为需要定义为xxx.github.io，默认分支改为main。\n问题2： 内容更新后本地页面正常，但是线上生成的页面混乱。生成站点文件并推送至远程库时，由于远程端的站点文件没有清除，导致页面没有正常更新。解决方案：所有图片文件不要放在public目录下，每次更新都需要hexo clean，第一次部署就需要把github的默认站点文件清除。\n问题3： 编辑文章时，图片不显示。用markdown编辑文章时，插入图片使用![](xxx.jpg)时，页面无法显示图片。\n解决方案：安装hexo-renderer-marked\nnpm install hexo-renderer-marked\n\n并在config.yaml中更改配置如下：\npost_asset_folder: true\n\n同时需要注意设置的图片的相对路径的位置是否正确。\n问题4： 如何实现站内的博客搜索？解决方案\n在 Hexo 项目根目录下安装 Hexo 插件：hexo-generator-searchdb。\nnpm install hexo-generator-searchdb\n\n并在 Hexo 配置文件 _config.yml 里添加如下配置项。\nsearch:  path: search.json  field: post  content: true  format: striptags\n\n主题配置文件的 _config.yml 的 local_search.enable 配置项的值设为 true。\nlocal_search:  enable: true\n","tags":["Hexo","总结","报告"]}]